{
  "name": "nexgen-backend",
  "version": "1.0.0",
  "description": "Modern backend API for NexGen Digital website",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "seed": "node scripts/seed.js"
  },
  "keywords": [
    "nodejs",
    "express",
    "mongodb",
    "api",
    "backend",
    "jwt",
    "authentication"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.10.0",
    "compression": "^1.7.4",
    "morgan": "^1.10.0",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "nodemailer": "^6.9.4",
    "dotenv": "^16.3.1",
    "joi": "^17.9.2",
    "multer": "^1.4.5-lts.1",
    "cloudinary": "^1.40.0",
    "express-validator": "^7.0.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.6.2",
    "supertest": "^6.3.3",
    "eslint": "^8.47.0",
    "eslint-config-node": "^4.1.0",
    "prettier": "^3.0.2"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/nexgen-backend.git"
  }
}

// ==================== .env.example ====================
// Copy this to .env and fill in your actual values

# Server Configuration
PORT=3000
NODE_ENV=development

# Database
MONGODB_URI=mongodb://localhost:27017/nexgen
# For MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/nexgen

# JWT Secret (generate a strong random string)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Frontend URL (for CORS)
FRONTEND_URL=http://localhost:3000

# Email Configuration (Gmail example)
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-specific-password
ADMIN_EMAIL=admin@yourdomain.com

# Cloudinary (for image uploads - optional)
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Session Configuration
SESSION_SECRET=your-session-secret-key

# ==================== .gitignore ====================
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# Temporary folders
tmp/
temp/

# Build directories
dist/
build/

# ==================== scripts/seed.js ====================
// Database seeding script
const mongoose = require('mongoose');
require('dotenv').config();

// Import models (you'll need to adjust paths based on your structure)
const User = require('../models/User');
const Project = require('../models/Project');

const seedData = async () => {
    try {
        // Connect to database
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/nexgen');
        console.log('Connected to MongoDB for seeding');

        // Clear existing data
        await User.deleteMany({});
        await Project.deleteMany({});
        console.log('Cleared existing data');

        // Create admin user
        const adminUser = new User({
            name: 'Admin User',
            email: 'admin@nexgen.com',
            password: 'admin123',
            role: 'admin',
            isVerified: true
        });
        await adminUser.save();
        console.log('Created admin user');

        // Create sample projects
        const sampleProjects = [
            {
                title: 'E-Commerce Platform',
                description: 'Modern e-commerce solution with React and Node.js',
                technologies: ['React', 'Node.js', 'MongoDB', 'Stripe'],
                featured: true,
                status: 'completed'
            },
            {
                title: 'Task Management App',
                description: 'Collaborative task management with real-time updates',
                technologies: ['Vue.js', 'Express', 'Socket.io', 'PostgreSQL'],
                featured: true,
                status: 'completed'
            },
            {
                title: 'Analytics Dashboard',
                description: 'Data visualization dashboard for business metrics',
                technologies: ['React', 'D3.js', 'Python', 'FastAPI'],
                featured: false,
                status: 'development'
            }
        ];

        await Project.insertMany(sampleProjects);
        console.log('Created sample projects');

        console.log('Database seeded successfully!');
        console.log('Admin login: admin@nexgen.com / admin123');
        
        mongoose.connection.close();
    } catch (error) {
        console.error('Seeding error:', error);
        process.exit(1);
    }
};

seedData();

// ==================== middleware/upload.js ====================
// File upload middleware using Multer and Cloudinary
const multer = require('multer');
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const cloudinary = require('cloudinary').v2;

// Configure Cloudinary
cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

// Configure Cloudinary storage
const storage = new CloudinaryStorage({
    cloudinary: cloudinary,
    params: {
        folder: 'nexgen-uploads',
        allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
        transformation: [
            { width: 1200, height: 800, crop: 'limit' },
            { quality: 'auto' }
        ]
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB limit
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Only image files are allowed'), false);
        }
    }
});

module.exports = { upload, cloudinary };